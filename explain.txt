Introduction
This project is a fully serverless URL shortener built using only the AWS Management Console.
It enables users to shorten long URLs and retrieve them using a unique short link.
The goal is to showcase AWS serverless architecture and hands-on cloud deployment.
1Ô∏è‚É£ Architecture Overview
üñº Key AWS Services Used:

Amazon S3 ‚Äì Hosts the frontend (static website).
Amazon CloudFront ‚Äì Distributes the website & API with caching and HTTPS support.
Amazon API Gateway ‚Äì Acts as a bridge between the frontend and backend.
AWS Lambda ‚Äì Backend logic for storing and retrieving URLs.
Amazon DynamoDB ‚Äì NoSQL database for mapping short URLs to long URLs.
Amazon Route 53 ‚Äì Manages the custom domain.
AWS Certificate Manager ‚Äì Provides SSL/TLS for secure HTTPS access.
üìå Flow of Requests:

User visits the frontend hosted on S3 via a browser.
Request is routed via CloudFront (CDN).
Frontend interacts with the API Gateway when submitting a URL.
API Gateway triggers an AWS Lambda function.
Lambda processes the request and stores/retrieves data from DynamoDB.
When a short URL is accessed, it redirects the user to the original long URL.
2Ô∏è‚É£ Brief Project Description
A scalable, cost-efficient, and serverless URL shortener.
Eliminates the need for managing servers, as AWS handles all backend infrastructure.
Provides a fully managed deployment with built-in security (HTTPS via ACM).
3Ô∏è‚É£ Step-by-Step Implementation
üîπ Frontend (Static Website - S3 & CloudFront)

Hosted on Amazon S3 with CloudFront acting as a CDN for better performance.
Uses JavaScript & Bootstrap for UI and API calls.
üîπ Backend (Lambda & API Gateway)

Lambda function (Python) handles API requests.
API Gateway routes frontend requests to the backend.
üîπ Database (DynamoDB)

Stores mappings of short URLs to long URLs in a NoSQL format.
üîπ Custom Domain (Route 53 & Certificate Manager)

Route 53 is used for domain management.
AWS Certificate Manager provides a free SSL/TLS certificate.
4Ô∏è‚É£ Hosting & Deployment
‚úÖ Frontend Deployment:

Static website uploaded to S3 bucket.
CloudFront serves the website with HTTPS.
‚úÖ Backend Deployment:

Lambda function created manually in the AWS Console.
API Gateway configured to trigger Lambda.
DynamoDB table set up to store URLs.
‚úÖ Domain Setup:

Route 53 is configured for a custom domain.
SSL/TLS enabled via AWS Certificate Manager.
5Ô∏è‚É£ File Structure (AWS Resources Instead of Code Files)
Since this project is built using only AWS Management Console, there is no local file structure like in traditional coding projects.
Instead, everything is organized as AWS resources:

Amazon S3 (Static website files)
AWS Lambda (Python function for URL processing)
Amazon DynamoDB (Table for storing URL mappings)
Amazon API Gateway (Routing API calls)
Amazon CloudFront (CDN for performance & security)
Amazon Route 53 (Domain name & DNS management)
AWS Certificate Manager (HTTPS certificates)